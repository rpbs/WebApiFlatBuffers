// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffersModels
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Company : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Company GetRootAsCompany(ByteBuffer _bb) { return GetRootAsCompany(_bb, new Company()); }
  public static Company GetRootAsCompany(ByteBuffer _bb, Company obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyCompany(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, CompanyVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Company __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CompanyId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatBuffersModels.Employee? Employees(int j) { int o = __p.__offset(6); return o != 0 ? (FlatBuffersModels.Employee?)(new FlatBuffersModels.Employee()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EmployeesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatBuffersModels.Company> CreateCompany(FlatBufferBuilder builder,
      int company_id = 0,
      VectorOffset employeesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Company.AddEmployees(builder, employeesOffset);
    Company.AddCompanyId(builder, company_id);
    return Company.EndCompany(builder);
  }

  public static void StartCompany(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddCompanyId(FlatBufferBuilder builder, int companyId) { builder.AddInt(0, companyId, 0); }
  public static void AddEmployees(FlatBufferBuilder builder, VectorOffset employeesOffset) { builder.AddOffset(1, employeesOffset.Value, 0); }
  public static VectorOffset CreateEmployeesVector(FlatBufferBuilder builder, Offset<FlatBuffersModels.Employee>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEmployeesVectorBlock(FlatBufferBuilder builder, Offset<FlatBuffersModels.Employee>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEmployeesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatBuffersModels.Employee>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEmployeesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatBuffersModels.Employee>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEmployeesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatBuffersModels.Company> EndCompany(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffersModels.Company>(o);
  }
  public static void FinishCompanyBuffer(FlatBufferBuilder builder, Offset<FlatBuffersModels.Company> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCompanyBuffer(FlatBufferBuilder builder, Offset<FlatBuffersModels.Company> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class CompanyVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CompanyId*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Employees*/, FlatBuffersModels.EmployeeVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
